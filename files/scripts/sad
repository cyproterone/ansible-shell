#!/usr/bin/env python3

import argparse
import asyncio as a
import difflib
import itertools
import locale
import os
import re
import sys
from argparse import Namespace
from typing import Any, Dict, Iterable, List, Set, Tuple


def run(fun, *args: List[Any]):
  loop = a.get_running_loop()
  return loop.run_in_executor(None, fun, *args)


def is_file(path: str) -> bool:
  if os.path.islink(path):
    return is_file(os.readlink(path))
  else:
    return os.path.isfile(path)


def read(path: str) -> List[str]:
  assert is_file(path), f"Not file :: {path}"
  with open(path, "r") as fd:
    return fd.readlines()


def write(path: str, content: str) -> None:
  with open(path, "w") as fd:
    fd.write(content)


def parse_flags(flags: Iterable[str]) -> int:
  lokup: Dict[str, int] = {"i": re.DOTALL,
                           "m": re.IGNORECASE,
                           "s": re.MULTILINE}
  coll: Set[int] = set(lokup[f] for f in flags)
  return sum(coll)


def sd(exact: bool, flags: int, pattern: str, replace: str, text: str) -> str:
  if exact:
    return text.replace(pattern, replace)
  else:
    return re.sub(pattern, replace, text, flags)


def diff(file: str, before: List[str], after: List[str]) -> Iterable[str]:
  if before == after:
    return []
  else:
    dif = difflib.unified_diff(
        before,
        after,
        fromfile=file,
        tofile=file)
    # pretend it's git -- for diff-so-fancy
    prefix = f"\ndiff --git {file} {file}\n"
    return itertools.chain([prefix], dif)


def delta(exact: bool, flags: int, pattern: str, replace: str, file: str) -> Tuple[List[str], str, str]:
  before = read(file)
  txt = "".join(before)
  replaced = sd(exact, flags, pattern, replace, txt)
  return before, txt, replaced


def preview(exact: bool, flags: int, pattern: str, replace: str, file: str) -> Iterable[str]:
  before, _, replaced = delta(exact, flags, pattern, replace, file)
  after = replaced.splitlines(True)
  return diff(file, before, after)


def replace(exact: bool, flags: int, pattern: str, replace: str, file: str) -> None:
  _, before, replaced =  delta(exact, flags, pattern, replace, file)
  if replaced != before:
    write(file, replaced)


def parse() -> Namespace:
  parser = argparse.ArgumentParser()

  parser.add_argument("pattern")
  parser.add_argument("replace")

  parser.add_argument(
      "-i",
      "--input",
      nargs="+",
      default=[])

  parser.add_argument(
      "-f",
      "--flags",
      nargs="+",
      default=[])

  parser.add_argument(
      "-e",
      "--exact",
      action="store_true")

  parser.add_argument(
      "-k",
      "--commit",
      action="store_true")

  parser.add_argument(
      "-0",
      "--print0",
      action="store_true")

  return parser.parse_args()


async def main() -> None:
  args = parse()
  stdin: str = sys.stdin.read()
  delim = "\0" if args.print0 else "\n"
  files: Iterable[str] = (args.input
                          if args.input
                          else [f for f in stdin.split(delim)if f])
  files.sort(key=locale.strxfrm)
  assert len(files)

  cmds = [args.exact,
          parse_flags(args.flags),
          args.pattern,
          args.replace, ]

  if args.commit:
    tasks = (run(replace, *cmds, f)
             for f in files)
    await a.gather(*tasks)
  else:
    tasks = (run(preview, *cmds, f)
             for f in files)
    diffs = await a.gather(*tasks)
    for dif in diffs:
      if dif:
        print(*dif, sep="", end="")


if __name__ == "__main__":
  loop = a.get_event_loop()
  loop.run_until_complete(main())
  loop.close()
