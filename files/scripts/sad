#!/usr/bin/env python3

import argparse
import difflib
import itertools
import locale
import os
import re
import sys
from argparse import Namespace
from re import Pattern
from typing import Any, Dict, Iterable, List, Set, Tuple, Union


def is_file(path: str) -> bool:
  if os.path.islink(path):
    return is_file(os.readlink(path))
  else:
    return os.path.isfile(path)


def read(path: str) -> List[str]:
  assert is_file(path), f"Not file :: {path}"
  with open(path, "r") as fd:
    return fd.readlines()


def write(path: str, content: str) -> None:
  with open(path, "w") as fd:
    fd.write(content)


def parse_flags(flags: Iterable[str]) -> int:
  lokup: Dict[str, int] = {"i": re.IGNORECASE,
                           "m": re.MULTILINE,
                           "s": re.DOTALL}
  coll: Set[int] = set(lokup[f] for f in flags)
  return sum(coll)


def sd(exact: bool, pattern: Union[str, Pattern], replace: str, text: str) -> str:
  if exact:
    return text.replace(pattern, replace)
  else:
    return re.sub(pattern, replace, text)


def diff(file: str, before: List[str], after: List[str]) -> Iterable[str]:
  if before == after:
    return []
  else:
    dif = difflib.unified_diff(
        before,
        after,
        fromfile=file,
        tofile=file)
    # pretend it's git -- for diff-so-fancy
    prefix = f"\ndiff --git {file} {file}\n"
    return itertools.chain([prefix], dif)


def delta(exact: bool, pattern: Union[str, Pattern], replace: str, file: str) -> Tuple[List[str], str, str]:
  before = read(file)
  txt = "".join(before)
  replaced = sd(exact, pattern, replace, txt)
  return before, txt, replaced


def preview(exact: bool, pattern: Union[str, Pattern], replace: str, file: str) -> Iterable[str]:
  before, _, replaced = delta(exact, pattern, replace, file)
  after = replaced.splitlines(True)
  return diff(file, before, after)


def replace(exact: bool, pattern: Union[str, Pattern], replace: str, file: str) -> None:
  _, before, replaced = delta(exact, pattern, replace, file)
  if replaced != before:
    write(file, replaced)
    return file
  else:
    return None


def parse() -> Namespace:
  parser = argparse.ArgumentParser()

  parser.add_argument("pattern")
  parser.add_argument("replace")

  parser.add_argument(
      "-i",
      "--input",
      nargs="+",
      default=[])

  parser.add_argument(
      "-f",
      "--flags",
      nargs="+",
      default=[])

  parser.add_argument(
      "-e",
      "--exact",
      action="store_true")

  parser.add_argument(
      "-k",
      "--commit",
      action="store_true")

  parser.add_argument(
      "-0",
      "--print0",
      action="store_true")

  return parser.parse_args()


def main() -> None:
  args = parse()
  stdin: str = sys.stdin.read()
  delim = "\0" if args.print0 else "\n"
  files: Iterable[str] = (args.input
                          if args.input
                          else [f for f in stdin.split(delim)if f])
  files.sort(key=locale.strxfrm)
  assert len(files)

  flags = parse_flags(args.flags)
  pattern = (args.pattern
             if args.exact
             else re.compile(args.pattern, flags))
  cmds = [args.exact,
          pattern,
          args.replace, ]

  if args.commit:
    diffs = (replace(*cmds, f)
             for f in files)
    for dif in diffs:
      if dif:
        print(dif)
  else:
    diffs = (preview(*cmds, f)
             for f in files)
    for dif in diffs:
      if dif:
        print(*dif, sep="", end="")


main()
