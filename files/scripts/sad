#!/usr/bin/env python3

import argparse
import asyncio as a
import difflib
import itertools
import locale
import os
import re
import sys


def run(fun, *args):
  loop = a.get_running_loop()
  return loop.run_in_executor(None, fun, *args)


def is_file(path):
  if os.path.islink(path):
    return is_file(os.readlink(path))
  else:
    return os.path.isfile(path)


def read(path):
  assert is_file(path), f"Not file :: {path}"
  with open(path, "r") as fd:
    return fd.readlines()


def write(path, content):
  with open(path, "w") as fd:
    fd.write(content)


def parse_flags(flags):
  lokup = {"i": re.DOTALL,
           "m": re.IGNORECASE,
           "s": re.MULTILINE}
  coll = set(lokup[f] for f in flags)
  return sum(coll)


def sd(exact, flags, pattern, replace, text):
  if exact:
    return text.replace(pattern, replace)
  else:
    return re.sub(pattern, replace, text, flags)


def diff(file, before, after):
  if before == after:
    return []
  else:
    dif = difflib.unified_diff(
        before,
        after,
        fromfile=file,
        tofile=file)
    # pretend it's git -- for diff-so-fancy
    prefix = f"diff --git {file} {file}\n"
    return itertools.chain([prefix], dif)


def preview(exact, flags, pattern, replace, file):
  lines = read(file)
  txt = "".join(lines)
  replaced = sd(exact, flags, pattern, replace, txt)
  after = replaced.splitlines(True)
  return diff(file, lines, after)


def replace(exact, flags, pattern, replace, file):
  lines = read(file)
  txt = "".join(lines)
  replaced = sd(exact, flags, pattern, replace, txt)
  if replaced != txt:
    write(file, replaced)


def parse():
  parser = argparse.ArgumentParser()

  parser.add_argument("pattern")
  parser.add_argument("replace")

  parser.add_argument(
      "-i",
      "--input",
      nargs="+",
      default=[])

  parser.add_argument(
      "-f",
      "--flags",
      nargs="+",
      default=[])

  parser.add_argument(
      "-e",
      "--exact",
      action="store_true")

  parser.add_argument(
      "-k",
      "--commit",
      action="store_true")

  parser.add_argument(
      "-0",
      "--print0",
      action="store_true")

  return parser.parse_args()


async def main():
  args = parse()
  stdin = sys.stdin.read()
  delim = "\0" if args.print0 else "\n"
  files = (args.input
           if args.input
           else [f for f in stdin.split(delim)if f])
  files.sort(key=locale.strxfrm)
  assert len(files)

  cmds = [args.exact,
          parse_flags(args.flags),
          args.pattern,
          args.replace, ]

  if args.commit:
    tasks = (run(replace, *cmds, f)
             for f in files)
    await a.gather(*tasks)
  else:
    tasks = (run(preview, *cmds, f)
             for f in files)
    diffs = await a.gather(*tasks)
    for dif in diffs:
      if dif:
        print(*dif, sep="", end="")


if __name__ == "__main__":
  loop = a.get_event_loop()
  loop.run_until_complete(main())
  loop.close()
