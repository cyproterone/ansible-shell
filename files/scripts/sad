#!/usr/bin/env python3

import argparse
import asyncio as a
import difflib
import locale
import multiprocessing
import operator
import os
import sys


semaphore = a.BoundedSemaphore(multiprocessing.cpu_count())


async def pipe(program, *args, stdin=None):
  async with semaphore:
    process = await a.create_subprocess_exec(
        *[program, *args],
        stdin=a.subprocess.PIPE,
        stdout=a.subprocess.PIPE,
        stderr=a.subprocess.PIPE)

    msg = stdin.encode() if stdin else None
    stdout, stderr = await process.communicate(msg)
    return stdout.decode(), stderr.decode(), process.returncode


def is_file(path):
  if os.path.islink(path):
    return is_file(os.readlink(path))
  else:
    return os.path.isfile(path)


def sd_flags(literal, regex):
  l_flags = ["-s"] if literal else []
  r_flags = [f"--flags={''.join(regex)}"] if regex else []
  return [*l_flags, *r_flags]


async def sd(preview, flags, pattern, replace, file):
  assert is_file(file), f"Not file :: {file}"
  op = operator.or_ if preview else operator.sub
  flagset = op(set(flags), set(["-p"]))
  args = [*flagset, pattern, replace, file]
  out, err, code = await pipe("sd", *args)
  assert code == 0, err
  return out


async def diff(before, after):
  max_w = 10000
  flags = ["--suppress-common-lines",
           f"--width={max_w}",
           "--unified=3", ]
  args = [*flags, before, "/dev/stdin"]
  out, err, code = await pipe("diff", *args, stdin=after)
  assert code in [0, 1], err
  changed = code == 1
  return changed, out


async def colour(colourizer, diff):
  out, err, code = await pipe(colourizer, stdin=diff)
  assert code == 0, err
  return out


async def preview(flags, pattern, replace, file):
  replaced = await sd(True, flags, pattern, replace, file)
  changed, dif = await diff(file, replaced)
  return dif if changed else None


def parse():
  parser = argparse.ArgumentParser()

  parser.add_argument("pattern")
  parser.add_argument("replace")

  parser.add_argument(
      "-i",
      "--input",
      nargs="+",
      default=[])

  parser.add_argument(
      "-f",
      "--flags",
      nargs="+",
      default=[])

  parser.add_argument(
      "-s",
      "--string",
      action="store_true")

  parser.add_argument(
      "-k",
      "--commit",
      action="store_true")

  parser.add_argument(
      "-0",
      "--print0",
      action="store_true")

  return parser.parse_args()


async def main():
  args = parse()
  stdin = sys.stdin.read()
  delim = "\0" if args.print0 else "\n"
  files = (args.input
           if args.input
           else [f for f in stdin.split(delim)if f])
  files.sort(key=locale.strxfrm)
  assert len(files)

  flags = sd_flags(args.string, args.flags)

  if args.commit:
    tasks = (sd(
        False,
        flags,
        args.pattern,
        args.replace,
        f)
        for f in files)
    await a.gather(*tasks)
  else:
    tasks = (preview(
        flags,
        args.pattern,
        args.replace,
        f)
        for f in files)
    diffs = await a.gather(*tasks)
    for dif in diffs:
      if dif:
        print(dif)


if __name__ == "__main__":
  loop = a.get_event_loop()
  loop.run_until_complete(main())
  loop.close()
