#!/usr/local/bin/python3

import argparse
import asyncio as a
import datetime
import getpass
import json
import os
import pathlib
import urllib.parse
import urllib.request


async def get(uri):
  def get():
    with urllib.request.urlopen(uri) as fd:
      return fd.read()
  loop = a.get_event_loop()
  res = await loop.run_in_executor(None, get)
  return res


def write(data, path, mode="w"):
  real_path = os.path.abspath(path)
  with open(real_path, mode) as fd:
    return fd.write(data)


def sanitize(path, replace="_", safe_chars={" ", ".", "_"}):
  sanitized = [c if c.isalnum() or c in safe_chars else replace
               for c in path]
  return "".join(sanitized).rstrip()


def extract(partial):
  uri = f"https://www.bing.com/{partial['url']}"
  title = partial["title"]
  date = datetime.datetime.strptime(partial["startdate"], "%Y%m%d")
  formatted_date = date.strftime("%Y_%m_%d")
  query = urllib.parse.urlparse(uri).query
  file_name = urllib.parse.parse_qs(query)["id"][0]
  _, ext = os.path.splitext(file_name)
  download_name = sanitize(f"{formatted_date} {title}{ext}")
  return {"uri": uri,
          "file_name": download_name}


async def bing(count=1):
  uri = f"https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n={count}"
  res = await get(uri)
  hist = json.loads(res.decode())
  images = [extract(i) for i in hist["images"]]
  return images


def save_path(base_path, image):
  return f"{base_path}/{image['file_name']}"


def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument("-o", "--out", required=True)
  parser.add_argument("-d", "--days", type=int, default=1)
  return parser.parse_args()


async def main():
  print(f"-- | {datetime.datetime.now()} | --")
  args = parse_args()
  base_path = os.path.abspath(args.out)
  images = await bing(args.days)
  candidates = [i for i in images
                if not os.path.isfile(save_path(base_path, i))]
  futures = [get(i["uri"]) for i in candidates]
  res = await a.gather(*futures)
  zipped = zip(res, candidates)
  for data, image in zipped:
    write(data, save_path(base_path, image), mode="wb")


if __name__ == "__main__":
  future = main()
  loop = a.get_event_loop()
  loop.run_until_complete(future)
  loop.close()
