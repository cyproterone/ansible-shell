#!/usr/bin/env python3

import argparse
import os
import shutil
import socket
import socketserver
import subprocess
import sys
from argparse import Namespace
from typing import List


def clean_socket(path: str) -> None:
  try:
    os.unlink(path)
  except IOError:
    pass


def supervise(*args: List[str]) -> None:
  process = subprocess.Popen(
      ["/Users/iiiii/dev.localized/ansible-shell/files/config/zsh/bin/c", "-d"],
      stdin=subprocess.PIPE,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE)
  while True:
    line = process.stdout.readline()
    print(line)


def remote_daemon(path: str) -> None:
  class Handler(socketserver.BaseRequestHandler):
    def handle(self) -> None:
      with self.request.makefile() as fd:
        data = fd.read()
        print(data, end="\0")

  clean_socket(path)
  with socketserver.UnixStreamServer(path, Handler) as srv:
    srv.serve_forever()


def remote_copy(path: str) -> None:
  with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as sock:
    sock.connect(path)
    data = sys.stdin.read().strip("\n") + "\n"
    sock.sendall(data.encode())


def pipe(prog: str, *args: List[str]) -> None:
  data: str = sys.stdin.read().strip("\n")
  subprocess.run([prog], input=data.encode())


def local_copy() -> None:
  if shutil.which("pbcopy"):
    pipe("pbcopy")
  else:
    raise NotImplementedError("⚠️ No clipboard integration ⚠️")


def parse_args() -> Namespace:
  socket_path = os.path.join(os.environ["HOME"], ".ssh", "copy_socket")
  do_supervise = sys.argv[0].endswith("ssh")
  parser = argparse.ArgumentParser()
  parser.add_argument("-s", "--supervise",
                      action="store_true", default=do_supervise)
  parser.add_argument("-d", "--daemon", action="store_true")
  parser.add_argument("--socket", default=socket_path)
  return parser.parse_args()


def run() -> None:
  args = parse_args()
  if args.supervise:
    supervise()
  elif args.daemon:
    remote_daemon(args.socket)
  elif os.environ.get("SSH_TTY") is not None:
    remote_copy(args.socket)
  else:
    local_copy()


def main() -> None:
  try:
    run()
  except KeyboardInterrupt:
    pass
  except Exception as e:
    print(e, file=sys.stderr)
    exit(1)


main()
